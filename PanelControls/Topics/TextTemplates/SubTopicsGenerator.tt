<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="..\..\..\Feature.Infrastructure\Core\TemplateHelpers.ttinclude" #><#

    // Read data from the JSON configuration file using a helper method
    Dictionary<string, object> topicsData = ReadJsonFile("../TopicsData.json");

    // Find The Parent Folder, Topics
    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    // Check the existence of outputDirectory under Parent Folder (case-sensitive key)
    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    // Get a namespace based on the template file's location
    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    // Create a namespace name based on the parent namespace and output directory name
    string namespaceName = parentNamespacename + "." + outputDirectoryName;

    // Use metadataKeyClassName from JSON if present, else default
    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";
    const string subTopicNameKey = "name";

    // Read the topics data from the JSON file
    // Get topics array
    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    // Loop through each topic
    foreach (var topic in topics)
    {
        string topicName = topic[topicNameKey] as string;
        string topicNameTitle = topicName + "Title";

        var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
            ?.Cast<Dictionary<string, object>>()
            .ToList();
        if (subTopics == null) continue;

        // Loop through subTopics
        foreach (var subTopic in subTopics)
        {

            // get the subTopicName
            string subTopicName = subTopic.ContainsKey(subTopicNameKey)
                ? subTopic[subTopicNameKey].ToString()
                : "UnknownSubTopic";

            // Generate the class name based on topic and subTopic names
            string className = $"{subTopicName}SubTopic";

            // Topic output directory
            string topicOutputDirectoryName = subTopicName;
            string topicOutputDirectoryPath = Path.Combine(outputDirectory, topicOutputDirectoryName);
            EnsureOutputDirectoryExists(outputDirectory, topicOutputDirectoryName);

            // Generate the output file path
            string outputFilePath = Path.Combine(topicOutputDirectoryPath, $"{className}.cs");

            // Use a StringBuilder capture T4 template output
            var sb = new StringBuilder();
            var originalEnv = this.GenerationEnvironment;
            this.GenerationEnvironment = sb;
#>
// Auto-generated file, DO NOT MODIFY
using Feature.Infrastructure.Core;
using Feature.Infrastructure.Interfaces;
using System.ComponentModel.Composition;

namespace <#= namespaceName #>
{
    [Export(typeof(IFeatureDemoSubTopic))]
    [ExportMetadata(MetaDataKeys.TopicName, AddonMetadataKeys.<#= topicNameTitle #>)]
    public partial class <#= className #> : IFeatureDemoSubTopic
    {
        public string Title => <#= metadataKeyClassName #>.<#= subTopicName #>Title;
    }
}
<#
    // Restore the original GenerationEnvironment and write to file
    this.GenerationEnvironment = originalEnv;
    File.WriteAllText(outputFilePath, sb.ToString());
#>
<#
        }
    }
#>
