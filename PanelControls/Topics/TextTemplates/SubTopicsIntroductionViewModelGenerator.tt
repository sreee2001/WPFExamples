<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="..\..\..\Feature.Infrastructure\Core\TemplateHelpers.ttinclude" #><#

    // Read data from the JSON configuration file using a helper method
    Dictionary<string, object> topicsData = ReadJsonFile("../TopicsData.json");

    // Find The Parent Folder, Topics
    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    // Check the existence of outputDirectory under Parent Folder (case-sensitive key)
    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    // Get a namespace based on the template file's location
    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    // Use metadataKeyClassName from JSON if present, else default
    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";

    // Read the topics data from the JSON file
    // Get topics array
    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    // Loop through each topic
    foreach (var topic in topics)
    {
        string topicName = topic[topicNameKey] as string;
        string topicNameTitle = topicName + "Title";

        var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
            ?.Cast<Dictionary<string, object>>()
            .ToList();
        if (subTopics == null) continue;

        // Loop through subTopics
        foreach (var subTopic in subTopics)
        {
            const string nameKey = "name";
            const string headerKey = "header";
            const string shortDescriptionKey = "shortDescription";
            const string descriptionListKey = "descriptionList";


            // get the subTopic Name
            string subTopicName = subTopic.ContainsKey(nameKey)
                ? subTopic[nameKey].ToString()
                : "UnknownSubTopic";

            // get the subtopic header
            string subTopicHeader = subTopic.ContainsKey(headerKey)
                ? subTopic[headerKey].ToString()
                : "UnknownHeader";

            // get the subtopic shortDescription
            string subTopicShortDescription = subTopic.ContainsKey(shortDescriptionKey)
                ? subTopic[shortDescriptionKey].ToString()
                : "UnknownShortDescription";

            // get the subtopic descriptionList
            var subTopicDescriptionList = (subTopic[descriptionListKey] as System.Collections.ArrayList)
            ?.Cast<string>()
            .ToList();

            if (subTopicDescriptionList == null)
                continue;

            string subTopicDescriptions = string.Join("," + Environment.NewLine, subTopicDescriptionList.Select(s => $"\"{s}\""));

            // Generate the class name based on topic and subTopic names
            string className = $"{subTopicName}IntroductionViewModel";

            // Topic output directory
            string topicOutputDirectoryName = subTopicName;
            string topicOutputDirectoryPath = Path.Combine(outputDirectory, topicOutputDirectoryName);
            EnsureOutputDirectoryExists(outputDirectory, topicOutputDirectoryName);

            // Generate the output file path
            string introductionViewModelFilePath = Path.Combine(topicOutputDirectoryPath, $"{className}.cs");

            // Create IntroductionViewModel.cs
            CreateIntroductionViewModel(parentNamespacename, outputDirectoryName, subTopicName, subTopicHeader, subTopicDescriptions, introductionViewModelFilePath);

        }
    }
#>
<#+

   // Helper method to create the IntroductionViewModel.cs file
    void CreateIntroductionViewModel(string parentNamespace, string outputDirectoryName, string subTopicName, string subTopicHeader, string subTopicDescriptions, string filePath)
    {
        // read the TemplatedIntroductionViewModel.cs.txt file
        string templateText = File.ReadAllText(Host.ResolvePath(@"TemplatedIntroductionViewModel.cs.txt"));

        // Create a namespace name based on the parent namespace and output directory name
        string namespaceName = parentNamespace + "." + outputDirectoryName + "." + subTopicName;

        // Replace placeholders in the template text
        string filledTemplateText = templateText
            .Replace("__TemplateNamespace__", namespaceName)
            .Replace("__Template__", subTopicName)
            .Replace("__TemplateTitle__", subTopicName+"Title")
            .Replace("__TemplateHeader__", subTopicHeader)
            .Replace("__TemplateDescriptions__", subTopicDescriptions);

        // Fill a template file with data and write it
        // Only create the file if it doesn't already exist
        //if (!File.Exists(filePath))
        {
            using(var writer = new StreamWriter(filePath, false, Encoding.UTF8))
            {
                writer.Write(filledTemplateText);
            }
        }
    }
#>
