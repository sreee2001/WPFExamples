<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="TemplateHelpers.ttinclude" #>
<#+
    public void GenerateAddinMetaData(string relativePathToJson, string outputDirectory = null)
    {
        // Read data from the JSON configuration file using a helper method
        Dictionary<string, object> topicsData = ReadJsonFile(relativePathToJson);

        // Find The Parent Folder, Topics
        string ttFilePath = Host.TemplateFile;
        string currentFolder = Path.GetDirectoryName(ttFilePath);
        string parentFolder = Path.GetDirectoryName(currentFolder);

        // Check the existence of outputDirectory under Parent Folder (case-sensitive key)
        var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
            ? topicsData["outputDirectory"].ToString()
            : "AutoGeneratedTopics";
        if (!string.IsNullOrEmpty(outputDirectory))
            outputDirectoryName = outputDirectory;
        string outputDir = Path.Combine(parentFolder, outputDirectoryName);

        EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

        // Get a namespace based on the template file's location
        string currentNamespaceName = GetNamespace();
        int lastDot = currentNamespaceName.LastIndexOf('.');
        string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

        // Create a namespace name based on the parent namespace and output directory name
        string namespaceName = parentNamespacename + "." + outputDirectoryName;

        // Use metadataKeyClassName from JSON if present, else default
        string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
            ? topicsData["metadataKeyClassName"].ToString()
            : "AddonMetadataKeys";

        const string topicsKey = "topics";
        const string topicNameKey = "topicName";
        const string subTopicsKey = "subTopics";
        const string subTopicNameKey = "name";

        // Read the topics data from the JSON file
        // Get topics array
        var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
            ?.Cast<Dictionary<string, object>>()
            .ToList();
        if (topics == null)
        {
            throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
        }

        // Generate the output file path
        string outputFilePathMetaDataKey = Path.Combine(outputDir, $"{metadataKeyClassName}.cs");

        // Use a StringBuilder capture T4 template output
        var sbMetaDataKey = new StringBuilder();

        sbMetaDataKey.AppendLine("// Auto-generated file, DO NOT MODIFY");
        sbMetaDataKey.AppendLine($"namespace {namespaceName}");
        sbMetaDataKey.AppendLine("{");
        sbMetaDataKey.AppendLine($"    public partial class {metadataKeyClassName}");
        sbMetaDataKey.AppendLine("    {");

        foreach (var topic in topics)
        {
            string topicName = topic[topicNameKey] as string;
            string topicNameTitle = topicName + "Title";

            sbMetaDataKey.AppendLine($"        #region {topicName}");
            sbMetaDataKey.AppendLine($"");
            sbMetaDataKey.AppendLine($"        public const string {topicNameTitle} = \"{ToSpacedString(topicName)}\";");

            // loop through subTopics and Create Titles
            var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
                ?.Cast<Dictionary<string, object>>()
                .ToList();
            if (subTopics != null)
            {
                foreach (var subTopic in subTopics)
                {
                    string subTopicName = subTopic.ContainsKey(subTopicNameKey)
                        ? subTopic[subTopicNameKey].ToString()
                        : "UnknownSubTopic";
                    sbMetaDataKey.AppendLine($"        public const string {subTopicName}Title = \"{ToSpacedString(subTopicName)}\";");
                }
            }
            sbMetaDataKey.AppendLine($"");
            sbMetaDataKey.AppendLine($"        #endregion {topicName}");
        }
        sbMetaDataKey.AppendLine("    }");
        sbMetaDataKey.AppendLine("}");

        File.WriteAllText(outputFilePathMetaDataKey, sbMetaDataKey.ToString());
    }
#>