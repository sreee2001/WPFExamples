<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="TemplateHelpers.ttinclude" #>
<#+
void GenerateSubTopicsIntroductionView(string relativePathToJson)
{
    Dictionary<string, object> topicsData = ReadJsonFile(relativePathToJson);

    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";
    const string subTopicNameKey = "name";

    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    foreach (var topic in topics)
    {
        string topicName = topic[topicNameKey] as string;
        string topicNameTitle = topicName + "Title";

        var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
            ?.Cast<Dictionary<string, object>>()
            .ToList();
        if (subTopics == null) continue;

        foreach (var subTopic in subTopics)
        {
            string subTopicName = subTopic.ContainsKey(subTopicNameKey)
                ? subTopic[subTopicNameKey].ToString()
                : "UnknownSubTopic";

            string className = $"{subTopicName}IntroductionView";
            string topicOutputDirectoryName = subTopicName;
            string topicOutputDirectoryPath = Path.Combine(outputDirectory, topicOutputDirectoryName);
            EnsureOutputDirectoryExists(outputDirectory, topicOutputDirectoryName);

            string introductionViewXamlFilePath = Path.Combine(topicOutputDirectoryPath, $"{className}.xaml");
            string introductionViewXamlCSFilePath = Path.Combine(topicOutputDirectoryPath, $"{className}.xaml.cs");

            CreateIntroductionViewXaml(parentNamespacename, outputDirectoryName, subTopicName, introductionViewXamlFilePath);
            CreateIntroductionViewXamlCs(parentNamespacename, outputDirectoryName, subTopicName, introductionViewXamlCSFilePath);
        }
    }
}

// Helper methods (copy from your original .tt)
void CreateIntroductionViewXaml(string parentNamespace, string outputDirectoryName, string subTopicName, string filePath)
{
    string templateText = File.ReadAllText(Host.ResolvePath(@"..\..\..\Feature.Infrastructure\TextTemplateIncludes\TemplatedIntroductionView.xaml.txt"));
    string namespaceName = parentNamespace + "." + outputDirectoryName + "." + subTopicName;
    string filledTemplateText = templateText
        .Replace("__TemplateNamespace__", namespaceName)
        .Replace("__Template__", subTopicName)
        .Replace("__TemplateProjectName__", GetProjectName())
        .Replace("__TEMPLATE_INTRODUCTIONVIEW_GRID_CONTENT__", "introductionView_GridContent");
    if (!File.Exists(filePath))
    {
        using(var writer = new StreamWriter(filePath, false, Encoding.UTF8))
        {
            writer.Write(filledTemplateText);
        }
    }
}

void CreateIntroductionViewXamlCs(string parentNamespace, string outputDirectoryName, string subTopicName, string filePath)
{
    string templateText = File.ReadAllText(Host.ResolvePath(@"..\..\..\Feature.Infrastructure\TextTemplateIncludes\TemplatedIntroductionView.xaml.cs.txt"));
    string namespaceName = parentNamespace + "." + outputDirectoryName + "." + subTopicName;
    string filledTemplateText = templateText
        .Replace("__TemplateNamespace__", namespaceName)
        .Replace("__Template__", subTopicName)
        .Replace("__TemplateProjectName__", GetProjectName())
        .Replace("__TEMPLATE_INTRODUCTIONVIEW_GRID_CONTENT__", "introductionView_GridContent");
    if (!File.Exists(filePath))
    {
        using(var writer = new StreamWriter(filePath, false, Encoding.UTF8))
        {
            writer.Write(filledTemplateText);
        }
    }
}
#>