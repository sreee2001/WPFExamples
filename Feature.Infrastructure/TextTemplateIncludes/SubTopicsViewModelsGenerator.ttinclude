<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="TemplateHelpers.ttinclude" #>
<#+
void GenerateSubTopicsViewModels(string relativePathToJson)
{
    Dictionary<string, object> topicsData = ReadJsonFile(relativePathToJson);

    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";

    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    foreach (var topic in topics)
    {
        string topicName = topic[topicNameKey] as string;
        string topicNameTitle = topicName + "Title";

        var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
            ?.Cast<Dictionary<string, object>>()
            .ToList();
        if (subTopics == null) continue;

        foreach (var subTopic in subTopics)
        {
            const string nameKey = "name";
            const string headerKey = "header";
            const string shortDescriptionKey = "shortDescription";
            const string descriptionListKey = "descriptionList";

            string subTopicName = subTopic.ContainsKey(nameKey)
                ? subTopic[nameKey].ToString()
                : "UnknownSubTopic";

            string subTopicHeader = subTopic.ContainsKey(headerKey)
                ? subTopic[headerKey].ToString()
                : "UnknownHeader";

            string subTopicShortDescription = subTopic.ContainsKey(shortDescriptionKey)
                ? subTopic[shortDescriptionKey].ToString()
                : "UnknownShortDescription";

            var subTopicDescriptionList = (subTopic[descriptionListKey] as System.Collections.ArrayList)
                ?.Cast<string>()
                .ToList();

            if (subTopicDescriptionList == null)
                continue;

            string subTopicDescriptions = string.Join("," + Environment.NewLine, subTopicDescriptionList.Select(s => $"\"{s}\""));

            string introductionViewclassName = $"{subTopicName}IntroductionViewModel";
            string sampleViewclassName = $"{subTopicName}SampleViewModel";
            string topicOutputDirectoryName = subTopicName;
            string topicOutputDirectoryPath = Path.Combine(outputDirectory, topicOutputDirectoryName);
            EnsureOutputDirectoryExists(outputDirectory, topicOutputDirectoryName);

            string introductionViewModelFilePath = Path.Combine(topicOutputDirectoryPath, $"{introductionViewclassName}.cs");
            string sampleViewModelFilePath = Path.Combine(topicOutputDirectoryPath, $"{sampleViewclassName}.cs");

            CreateIntroductionViewModel(parentNamespacename, outputDirectoryName, subTopicName, subTopicHeader, subTopicDescriptions, introductionViewModelFilePath);
            CreateSampleViewModel(parentNamespacename, outputDirectoryName, subTopicName, subTopicHeader, subTopicDescriptions, sampleViewModelFilePath, sampleViewclassName);

        }
    }
}

// Helper method to create the IntroductionViewModel.cs file
void CreateIntroductionViewModel(string parentNamespace, string outputDirectoryName, string subTopicName, string subTopicHeader, string subTopicDescriptions, string filePath)
{
    string templateText = File.ReadAllText(Host.ResolvePath(@"..\..\..\Feature.Infrastructure\TextTemplateIncludes\TemplatedIntroductionViewModel.cs.txt"));
    string namespaceName = parentNamespace + "." + outputDirectoryName + "." + subTopicName;
    string filledTemplateText = templateText
        .Replace("__TemplateNamespace__", namespaceName)
        .Replace("__Template__", subTopicName)
        .Replace("__TemplateTitle__", subTopicName+"Title")
        .Replace("__TemplateHeader__", subTopicHeader)
        .Replace("__TemplateDescriptions__", subTopicDescriptions);

    using(var writer = new StreamWriter(filePath, false, Encoding.UTF8))
    {
        writer.Write(filledTemplateText);
    }
}

// Helper method to create the IntroductionViewModel.cs file
void CreateSampleViewModel(string parentNamespace, string outputDirectoryName, string subTopicName, string subTopicHeader, string subTopicDescriptions, string filePath, string className)
{
    string templateText = File.ReadAllText(Host.ResolvePath(@"..\..\..\Feature.Infrastructure\TextTemplateIncludes\TemplatedSampleViewModel.cs.txt"));
    string namespaceName = parentNamespace + "." + outputDirectoryName + "." + subTopicName;
    string filledTemplateText = templateText
        .Replace("__TemplateNamespace__", namespaceName)
        .Replace("__TemplateClassName__", className);

    using(var writer = new StreamWriter(filePath, false, Encoding.UTF8))
    {
        writer.Write(filledTemplateText);
    }
}
#>