<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="TemplateHelpers.ttinclude" #>
<#+
void GenerateSubTopicsDataTemplates(string relativePathToJson)
{
    Dictionary<string, object> topicsData = ReadJsonFile(relativePathToJson);

    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";
    const string subTopicNameKey = "name";

    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    var dataTemplateOutputDirectory = Path.Combine(outputDirectory, "Resources");
    EnsureOutputDirectoryExists(outputDirectory, "Resources");

    var dataTemplateFilePath = Path.Combine(dataTemplateOutputDirectory, "DataTemplates.xaml");

    using(var writer = new StreamWriter(dataTemplateFilePath, false, Encoding.UTF8) )
    {
        string rd_headerStart= @"<ResourceDictionary xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
    xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""";
        string rd_headerEnd= @"   >";

        writer.WriteLine(rd_headerStart);

        List<string> all_header_xmlns = new List<string> ();
        List<string> all_data_templates = new List<string> ();

        foreach (var topic in topics)
        {
            string topicName = topic[topicNameKey] as string;
            string topicNameTitle = topicName + "Title";

            var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
                ?.Cast<Dictionary<string, object>>()
                .ToList();
            if (subTopics == null) continue;

            foreach (var subTopic in subTopics)
            {
                string subTopicName = subTopic.ContainsKey(subTopicNameKey)
                    ? subTopic[subTopicNameKey].ToString()
                    : "UnknownSubTopic";

                string topicNamespace = $"{parentNamespacename}.{outputDirectoryName}";
                var subTopicxmlns = Getxmlns(topicNamespace, subTopicName);
                all_header_xmlns.Add(subTopicxmlns);

                string topicOutputDirectoryName = subTopicName;
                string topicOutputDirectoryPath = Path.Combine(outputDirectory, topicOutputDirectoryName);
                EnsureOutputDirectoryExists(outputDirectory, topicOutputDirectoryName);

                string subTopicDemoDataTemplate = GetDataTemplate(subTopicName, "Demo");
                string subTopicIntroductionDataTemplate = GetDataTemplate(subTopicName, "Introduction");
                string subTopicSampleDataTemplate = GetDataTemplate(subTopicName, "Sample");


                //all_data_templates.Add(Environment.NewLine + subTopicIntroductionDataTemplate);
                all_data_templates.Add(Environment.NewLine + subTopicSampleDataTemplate);
            }
        }

        foreach(var header_xmlns in all_header_xmlns)
            writer.WriteLine(header_xmlns);
        
        writer.WriteLine("    xmlns:common=\"clr-namespace:BasicControls.Common;assembly=BasicControls\"");

        writer.WriteLine(rd_headerEnd);
        writer.WriteLine();

        writer.WriteLine(GetIntroductionDataTemplateString());
        writer.WriteLine();

        foreach(var dataTemplate in all_data_templates)
        {
            writer.WriteLine(dataTemplate);
            writer.WriteLine();
        }

        writer.Write(@"</ResourceDictionary>");
    }
}

string GetIntroductionDataTemplateString()
{
    return @"   <DataTemplate DataType=""{x:Type common:ControlIntroductionViewModel}"">
        <common:ControlIntroductionView />
    </DataTemplate>";
}

string GetGenericDataTemplateString()
{
    return @"   <DataTemplate DataType=""{x:Type __TEMPLATE___ns:__TEMPLATE_VIEW_MODEL__}"">
        <__TEMPLATE___ns:__TEMPLATE_VIEW__ />
    </DataTemplate>";
}

string GetDataTemplate(string subTopicName, string purpose)
{
    string templateText = GetGenericDataTemplateString();
    string filledTemplateText = templateText
        .Replace("__TEMPLATE__", subTopicName)
        .Replace("__TEMPLATE_VIEW_MODEL__", subTopicName + purpose + "ViewModel")
        .Replace("__TEMPLATE_VIEW__", subTopicName + purpose + "View");
    return filledTemplateText;
}

string Getxmlns(string topicNamespace, string subTopicName)
{
    return $"    xmlns:{subTopicName}_ns=\"clr-namespace:{topicNamespace}.{subTopicName}\"";
}
#>