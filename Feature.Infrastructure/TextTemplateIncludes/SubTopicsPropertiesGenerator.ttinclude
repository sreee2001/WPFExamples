<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="TemplateHelpers.ttinclude" #>
<#+
void GenerateSubTopicsProperties(string relativePathToJson)
{
    Dictionary<string, object> topicsData = ReadJsonFile(relativePathToJson);

    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    string namespaceName = parentNamespacename + "." + outputDirectoryName;

    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";
    const string subTopicNameKey = "name";
    const string propertiesKey = "properties";
    const string propertyNameKey = "name";
    const string propertyTypeKey = "type";

    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    foreach (var topic in topics)
    {
        string topicName = topic[topicNameKey] as string;
        string topicNameTitle = topicName + "Title";

        var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
            ?.Cast<Dictionary<string, object>>()
            .ToList();
        if (subTopics == null) continue;

        foreach (var subTopic in subTopics)
        {
            string subTopicName = subTopic.ContainsKey(subTopicNameKey)
                ? subTopic[subTopicNameKey].ToString()
                : "UnknownSubTopic";
                
            string className = $"{subTopicName}Properties";
            string topicOutputDirectoryName = subTopicName;
            string topicOutputDirectoryPath = Path.Combine(outputDirectory, topicOutputDirectoryName);
            EnsureOutputDirectoryExists(outputDirectory, topicOutputDirectoryName);

            string outputFilePath = Path.Combine(topicOutputDirectoryPath, $"{className}.cs");

            var sbForProperties = new StringBuilder();

            sbForProperties.AppendLine("// Auto-generated file, DO NOT MODIFY");
            sbForProperties.AppendLine("using Infrastructure.Base;");
            sbForProperties.AppendLine("using System.Windows;");
            sbForProperties.AppendLine("using System.Windows.Media;");
            sbForProperties.AppendLine("using System.Windows.Controls;");
            sbForProperties.AppendLine();
            sbForProperties.AppendLine($"namespace {namespaceName}");
            sbForProperties.AppendLine("{");
            sbForProperties.AppendLine($"    public partial class {className} : PropertyChangedBase");
            sbForProperties.AppendLine("    {");

            var properties = (subTopic[propertiesKey] as System.Collections.ArrayList)
                ?.Cast<Dictionary<string, object>>()
                .ToList();
            if (properties == null) continue;

            foreach(var prop in properties)
            {
                string propName = prop.ContainsKey(propertyNameKey)
                    ? prop[propertyNameKey].ToString()
                    : "UnknownProperty";
                string propType = prop.ContainsKey(propertyTypeKey)
                    ? prop[propertyTypeKey].ToString()
                    : "UnknownType";

                sbForProperties.AppendLine($"        private {propType} {GetPrivateVariable(propName)};");
                sbForProperties.AppendLine($"        public {propType} {propName}");
                sbForProperties.AppendLine("        {");
                sbForProperties.AppendLine($"            get => {GetPrivateVariable(propName)};");
                sbForProperties.AppendLine($"            set => SetField(ref {GetPrivateVariable(propName)}, value);");
                sbForProperties.AppendLine("        }");
                sbForProperties.AppendLine();
            }

            sbForProperties.AppendLine("    }");
            sbForProperties.AppendLine("}");

            File.WriteAllText(outputFilePath, sbForProperties.ToString());
        }
    }
}
#>