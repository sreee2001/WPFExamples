<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="..\..\..\Feature.Infrastructure\Core\TemplateHelpers.ttinclude" #><#

    // Read data from the JSON configuration file using a helper method
    Dictionary<string, object> topicsData = ReadJsonFile("../TopicsData.json");

    // Find The Parent Folder, Topics
    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    // Check the existence of outputDirectory under Parent Folder (case-sensitive key)
    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    // Get a namespace based on the template file's location
    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    // Create a namespace name based on the parent namespace and output directory name
    string namespaceName = parentNamespacename + "." + outputDirectoryName;

    // Use metadataKeyClassName from JSON if present, else default
    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";
    const string subTopicNameKey = "name";

    // Read the topics data from the JSON file
    // Get topics array
    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    // Create a metadata key for each topic name
    {
        // Generate the output file path
        string outputFilePathMetaDataKey = Path.Combine(outputDirectory, $"{metadataKeyClassName}.cs");

        // Use a StringBuilder capture T4 template output
        var sbMetaDataKey = new StringBuilder();
        var originalEnvMetaDataKey = this.GenerationEnvironment;
        this.GenerationEnvironment = sbMetaDataKey;
#>
// Auto-generated file, DO NOT MODIFY
namespace <#= namespaceName #>
{
    public partial class <#= metadataKeyClassName #>
    {
<#
        // Restore the original GenerationEnvironment and write to file
        this.GenerationEnvironment = originalEnvMetaDataKey;
        File.WriteAllText(outputFilePathMetaDataKey, sbMetaDataKey.ToString());

        foreach (var topic in topics)
        {
            string topicName = topic[topicNameKey] as string;
            string topicNameTitle = topicName + "Title";

            // Create TopicTitles
            {
                originalEnvMetaDataKey = this.GenerationEnvironment;
                this.GenerationEnvironment = sbMetaDataKey;
#>
        #region <#= topicName #>

        public const string <#= topicNameTitle #> = "<#= ToSpacedString(topicName) #>";

<#

                // Restore the original GenerationEnvironment and write to file
                this.GenerationEnvironment = originalEnvMetaDataKey;
                File.WriteAllText(outputFilePathMetaDataKey, sbMetaDataKey.ToString());

            } // End Create TopicTitles

            // loop through subTopics and Create Titles
            {
                // fetch the subTopics
                var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
                    ?.Cast<Dictionary<string, object>>()
                    .ToList();
                if (subTopics == null) continue;

                foreach(var subTopic in subTopics)
                {
                    // get the subTopicName
                    string subTopicName = subTopic.ContainsKey(subTopicNameKey)
                        ? subTopic[subTopicNameKey].ToString()
                        : "UnknownSubTopic";

                    originalEnvMetaDataKey = this.GenerationEnvironment;
                    this.GenerationEnvironment = sbMetaDataKey;
#>
        public const string <#= subTopicName #>Title = "<#= ToSpacedString(subTopicName) #>";
<#
                    // Restore the original GenerationEnvironment and write to file
                    this.GenerationEnvironment = originalEnvMetaDataKey;
                    File.WriteAllText(outputFilePathMetaDataKey, sbMetaDataKey.ToString());

                }
            }

            originalEnvMetaDataKey = this.GenerationEnvironment;
            this.GenerationEnvironment = sbMetaDataKey;
#>

        #endregion <#= topicName #>

<#
            // Restore the original GenerationEnvironment and write to file
            this.GenerationEnvironment = originalEnvMetaDataKey;
            File.WriteAllText(outputFilePathMetaDataKey, sbMetaDataKey.ToString());

        }
        originalEnvMetaDataKey = this.GenerationEnvironment;
        this.GenerationEnvironment = sbMetaDataKey;
#>
    }
}
<#
        // Restore the original GenerationEnvironment and write to file
        this.GenerationEnvironment = originalEnvMetaDataKey;
        File.WriteAllText(outputFilePathMetaDataKey, sbMetaDataKey.ToString());
    }
    // End of metadata key generation

#>
