<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ include file="..\..\..\Feature.Infrastructure\Core\TemplateHelpers.ttinclude" #><#

    // Read data from the JSON configuration file using a helper method
    Dictionary<string, object> topicsData = ReadJsonFile("../TopicsData.json");

    // Find The Parent Folder, Topics
    string ttFilePath = Host.TemplateFile;
    string currentFolder = Path.GetDirectoryName(ttFilePath);
    string parentFolder = Path.GetDirectoryName(currentFolder);

    // Check the existence of outputDirectory under Parent Folder (case-sensitive key)
    var outputDirectoryName = topicsData.ContainsKey("outputDirectory")
        ? topicsData["outputDirectory"].ToString()
        : "AutoGeneratedTopics";
    string outputDirectory = Path.Combine(parentFolder, outputDirectoryName);

    EnsureOutputDirectoryExists(parentFolder, outputDirectoryName);

    // Get a namespace based on the template file's location
    string currentNamespaceName = GetNamespace();
    int lastDot = currentNamespaceName.LastIndexOf('.');
    string parentNamespacename = lastDot > 0 ? currentNamespaceName.Substring(0, lastDot) : currentNamespaceName;

    // Use metadataKeyClassName from JSON if present, else default
    string metadataKeyClassName = topicsData.ContainsKey("metadataKeyClassName")
        ? topicsData["metadataKeyClassName"].ToString()
        : "AddonMetadataKeys";

    const string topicsKey = "topics";
    const string topicNameKey = "topicName";
    const string subTopicsKey = "subTopics";
    const string subTopicNameKey = "name";

    // Read the topics data from the JSON file
    // Get topics array
    var topics = (topicsData[topicsKey] as System.Collections.ArrayList)
        ?.Cast<Dictionary<string, object>>()
        .ToList();
    if (topics == null)
    {
        throw new InvalidOperationException("Invalid or missing 'topics' data in the JSON file.");
    }

    var dataTemplateOutputDirectory = Path.Combine(outputDirectory, "Resources");
    EnsureOutputDirectoryExists(outputDirectory, "Resources");

    var dataTemplateFilePath = Path.Combine(dataTemplateOutputDirectory, "DataTemplates.xaml");

    using(var writer = new StreamWriter(dataTemplateFilePath, false, Encoding.UTF8) )
    {
        string rd_headerStart= @"<ResourceDictionary xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
    xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""";
        string rd_headerEnd= @"   >";

        //
        {
        //xmlns:__PROJECTNAME__=""clr-namespace:__PROJECTNAME__""
        }
        
        //rd_header = rd_headerStart
        //    .Replace("__PROJECTNAME__", GetProjectName());
        writer.WriteLine(rd_headerStart);

        List<string> all_header_xmlns = new List<string> ();
        List<string> all_data_templates = new List<string> ();

        // Loop through each topic
        foreach (var topic in topics)
        {
            string topicName = topic[topicNameKey] as string;
            string topicNameTitle = topicName + "Title";

            var subTopics = (topic[subTopicsKey] as System.Collections.ArrayList)
                ?.Cast<Dictionary<string, object>>()
                .ToList();
            if (subTopics == null) continue;

            // Loop through subTopics
            foreach (var subTopic in subTopics)
            {

                // get the subTopicName
                string subTopicName = subTopic.ContainsKey(subTopicNameKey)
                    ? subTopic[subTopicNameKey].ToString()
                    : "UnknownSubTopic";

                // Generate the class name based on topic and subTopic names
                // string topicNamespace = $"{parentNamespacename}.{outputDirectoryName}.{subTopicName}";
                string topicNamespace = $"{parentNamespacename}.{outputDirectoryName}";
                //parentNamespace + "." + outputDirectoryName + "." + subTopicName;
                var subTopicxmlns = Getxmlns(topicNamespace, subTopicName);
                all_header_xmlns.Add(subTopicxmlns);

                // Topic output directory
                string topicOutputDirectoryName = subTopicName;
                string topicOutputDirectoryPath = Path.Combine(outputDirectory, topicOutputDirectoryName);
                EnsureOutputDirectoryExists(outputDirectory, topicOutputDirectoryName);


                string subTopicDemoDataTemplate = GetDataTemplate(subTopicName, "Demo");
                string subTopicIntroductionDataTemplate = GetDataTemplate(subTopicName, "Introduction");

                //writer.WriteLine(subTopicDemoDataTemplate);
                //writer.WriteLine(subTopicIntroductionDataTemplate);
                //writer.WriteLine();

                all_data_templates.Add(/*subTopicDemoDataTemplate +*/ Environment.NewLine + subTopicIntroductionDataTemplate);
            }
        }

        // Write all xmlns
        foreach(var header_xmlns in all_header_xmlns)
            writer.WriteLine(header_xmlns);

        writer.WriteLine(rd_headerEnd);

        writer.WriteLine();

        foreach(var dataTemplate in all_data_templates)
        {
            writer.WriteLine(dataTemplate);
            writer.WriteLine();
        }

        writer.Write(@"</ResourceDictionary>");
    }

#>
<#+

    string GetGenericDataTemplateString()
    {
        return @"   <DataTemplate DataType=""{x:Type __TEMPLATE___ns:__TEMPLATE_VIEW_MODEL__}"">
        <__TEMPLATE___ns:__TEMPLATE_VIEW__ />
    </DataTemplate>";
    }

   // Helper method to create the IntroductionView.xaml file
    string GetDataTemplate(string subTopicName, string purpose)
    {
        // get the GenericDataTemplateString
        string templateText = GetGenericDataTemplateString();

        // Replace placeholders in the template text
        string filledTemplateText = templateText
            .Replace("__TEMPLATE__", subTopicName)
            .Replace("__TEMPLATE_VIEW_MODEL__", subTopicName + purpose + "ViewModel")
            .Replace("__TEMPLATE_VIEW__", subTopicName + purpose + "View");

        return filledTemplateText;
    }
#>
<#+
    string Getxmlns(string topicNamespace, string subTopicName)
    {
        return $"   xmlns:{subTopicName}_ns=\"clr-namespace:{topicNamespace}.{subTopicName}\"";
    }
#>

